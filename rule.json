{
  "rule" : {
    "key" : "java:S107",
    "name" : "Methods should not have too many parameters",
    "severity" : "MAJOR",
    "descriptionSections" : [ {
      "key" : "default",
      "content" : "<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many\nthings.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a maximum number of 4 parameters:</p>\n<pre>\npublic void doSomething(int param1, int param2, int param3, String param4, long param5) {\n...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(int param1, int param2, int param3, String param4) {\n...\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Methods annotated with :</p>\n<ul>\n  <li> Spring’s <code>@RequestMapping</code> (and related shortcut annotations, like <code>@GetRequest</code>) </li>\n  <li> JAX-RS API annotations (like <code>@javax.ws.rs.GET</code>) </li>\n  <li> Bean constructor injection with <code>@org.springframework.beans.factory.annotation.Autowired</code> </li>\n  <li> CDI constructor injection with <code>@javax.inject.Inject</code> </li>\n  <li> <code>@com.fasterxml.jackson.annotation.JsonCreator</code> </li>\n  <li> Micronaut’s annotations (like <code>@io.micronaut.http.annotation.Get</code>) </li>\n</ul>\n<p>may have a lot of parameters, encapsulation being possible. Such methods are therefore ignored.</p>\n<p>Also, if a class annotated as a Spring component (like <code>@org.springframework.stereotype.Component</code>) has a single constructor, that\nconstructor will be considered <code>@Autowired</code> and ignored by the rule.</p>"
    } ]
  }
}